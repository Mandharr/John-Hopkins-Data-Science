a <- 1
class(a)
mode(a)
b <- "R programming"
class(b)
mode(b)
x = c(0.5, 0.6)
x = c(1,2,3)
x = c(T,F)
x = c("a","b","c")
x <- vector("numeric", length = 10)
y <- vector("character", length = 10)
y
print("Hello World")
a <- 1
class(a)
mode(a)
b <- "R programming"
class(b)
mode(b)
x = c(0.5, 0.6)
x = c(1,2,3)
x = c(T,F)
x = c("a","b","c")
z <- vector("numeric", length = 10)
y <- vector("character", length = 10)
xlist <- list(1,"a", TRUE, 1.1) # Multi type vector
xlist
ylist <- list(xlist, test_mat)
ylist
dim(test_mat)
attr(test_mat)
attributes(test_mat)
dim(man) <- c(2,3) # this converts vector man to a matrix man, using the dimmensions provided.
dim(man) <- c(2,5) # this converts vector man to a matrix man, using the dimmensions provided.
man
man
dim(man) <- c(2,5) # this converts vector man to a matrix man, using the dimmensions provided.
man
temp <- c("L","M","H","L","L","M")
temp_fact   <- factor(temp, levels = c("L","M","H"))
temp_fact
temp_fact[1] < temp_fact[2]
temp_fact   <- factor(temp, levels = c("L","M","H"), labels = c("Low","Medium","High"))
temp_fact
?factor
temp_fact   <- factor(temp, levels = c("L","M","H"), labels = c("Low","Medium","High"), is.ordered(temp))
temp_fact
`xfact <- factor(c("yes","no","no","yes","yes))`
xfact <- factor(c("yes","no","no","yes","yes))
,
1
)
aqswq
:
;
attr()
?
?+
``
``
""
"
"
''
"""
xfact <- factor(c("yes","no","no","yes","yes))
""
"""
xfact <- factor(c("yes","no","no","yes","yes))
""
"
xfact <- factor(c("yes","no","no","yes","yes"))
xfact
table(xfact)
attr(xfact)
unclass(xfact)
temp <- c("L","M","H","L","L","M")
temp_fact   <- factor(temp, levels = c("L","M","H"), ordered = T)
temp_fact
tinytex::install_tinytex()
xmiss <- c(1,2,NA,3,4,NaN)
is.na(xmiss)
is.nan(xmiss)
xframe <- data.frame(1:10)
xframe
xframe <- data.frame(1:10, names("Sr.no"))
xframe <- data.frame(1:10, names("Sr_no"))
xframe <- data.frame(1:10, colnames("Sr_no"))
xframe
View(xframe)
# Create varied vectors
ID <- c(1:10)
Name <- c("a","b","c","d","e","f","g","h","i","j")
xdata <- data.frame(ID,Name)
xdata
summary(xdata)
str(xdata)
subset(xdata, subset = ID>5)
newcolumn <- c(20:30)
xdata$Marks <- newcolumn
newcolumn <- c(21:30)
xdata$Marks <- newcolumn
xdata
xdata <- rbind(11,"k",31)
xdata
# Create varied vectors
ID <- c(1:10)
Name <- c("a","b","c","d","e","f","g","h","i","j")
xdata <- data.frame(ID,Name)
xdata
newcolumn <- c(21:30)
xdata$Marks <- newcolumn
xdata
xdata <- rbind(xdata, c(11,"k",31))
xdata
is.na(xdata)
xdata <- rbind(xdata, c(11,k,31))
xdata <- rbind(xdata, c(11,"k",31))
xdata
View(xdata)
ydata <- data.frame(a =  1,b="a")
dput(ydata)
x <- "'foo"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file = "data.R")
rm(x,y)
source("data.R")
x
y
file()
str(fil)
str(file)
x <- list(foo = 1:4, bar = 0.6, baz= "hello")
x[c(1,3)] # returns list objects in first and third index
x[[c(1,3)]]
x <- list(foo = 1:4, bar = 0.6, baz= "hello")
x[c(1,3)] # returns list objects in first and third index
x <- c(1,2,na,4)
x <- c(1,2,NA,4)
y <- c("a","b",NA,"c")
checkna <- complete.cases(x,y)
checkna
x[checkna]
x <- c(1,2,NA,4)
y <- c("a","b",NA,"c",NA)
checkna <- complete.cases(x,y)
x <- c(1,NA,NA,4)
y <- c("a","b",NA,"c")
checkna <- complete.cases(x,y)
checkna
x[checkna]
airquality[1:6,]
good <- complete.cases(airquality)
airquality[good, ]
airquality[1:6,]
good <- complete.cases(airquality)
airquality[good, ][1:6, ]
airquality[1:6,]
good <- complete.cases(airquality)
good
airquality[good, ][1:6, ]
airquality[1:6,]
good <- complete.cases(airquality)
good[1:6, ]
airquality[1:6,]
good <- complete.cases(airquality)
good[1:6,]
x <- 4L
class(x)
x <- c(4,"a",TRUE)
class(x)
x
x<- 1:4
y< 2
y<- 2
z<- x+y
z
y<- 2:3
z
y
x+y
class(z)
install.packages("siwrl")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z = c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c()
?c()/c
?c
z
c(z,55,z)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwed()
old.dir <- getwd()
dir.create(testdir)
?dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
getwd()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
args(file.path)
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create("testdir2", file.path("testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length= 30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
?along.with
??along.with
info()
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vec <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf ,- num_vect<1
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Mandar")
my_name
paste(my_name, collapse = " ")
paste("hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS,1:4,sep = "-")
x <-  c(44, NA,5, NA)
x *3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x,y), 100)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1;10]
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[is.na(x) & x > 0]
x[!is.na(x) & x > 0]
x[c(3,6,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo =11, bar =2 norf =NA)
vect <- c(foo =11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,6)
dim(my_vector) <- c(4,6)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age","weight", "bp", "rating","test")
cnames <- c("patient", "age","weight", "bp", "rating","test")
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
setwd("D:/R for Data Science/John Hopkins Data Science")
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
seq_along(my_seq)
?seq_len
seq_len()
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x
seq_len(nrow(x))
seq_len(ncol(x))
for (i in seq_len(nrow (x))) print(x)
}
for (i in seq_len(nrow (x))){ print(x)
}
for (i in seq_len(nrow (x))){ print(x[i])
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1,1,0.5)
if(coin ==1) {
z<- z+1
} else {
z <- z -1
}
}
for (i in 1:100) {
if(i <= 20){
next # skips number till 20
}
print(i)
}
for (i in 1:100) {
if(i <= 20){
next # skips number till 20
print(i)
}
}
for (i in 1:100) {
if(i <= 20){
next # skips number till 20
print(i)
}
}
for (i in 1:100) {
if(i <= 20){
next # skips number till 20
print(i)
}
print("mandar")
}
add2 <- function(x,y) {
x+y
}
add(3,5)
add2(3,5)
aboveten <- function(x) {
use <- x > 10
x[use]
}
x <- 1:20
aboveten(x)
above(x, 6)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 6)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[i])
}
means
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y) # find the number of column in the matrix
means <- numeric(nc) # making sure the number are numeric for looping
for(i in 1:nc) { # create a for-loop of i from 1 to columns in matrix
means[i] <- mean(y[,i]) # means[i] :create a dynamic vector | mean(y[,i]) mean of the [i] column
}
means # return mean
}
columnmean(airquality) # passing the airquality dataframe
my_data
sd(my_data)
mydata <- 1:20
sd(mydata)
sd(x=mydata)
sd(x= mydata, na.rm=FALSE)
sd(na.rm = FALSE, x=mydata)
# they all mean the same .
func <- function(a,b){
a^2
}
func(2)
func <- function(a,b) {
print(a)
print(b)
}
func(45)
# Creating Function in R
# They Belong to the class : Function
# We can nest funcion and be passed in other function.
# Named arguments have default values
# formals  : returns a list of all fornal arguuments
# Argument matching is done positionally or by name.
add2 <- function(x,y) {
x+y
}
aboveten <- function(x) {
use <- x > 10
x[use]
}
above <- function(x, n) {
use <- x > n
x[use]
}
# ******************************************************************
# Accepting Matrix and finding means of columns
columnmean <- function(y) {
nc <- ncol(y)         # find the number of column in the matrix
means <- numeric(nc)  # making sure the number are numeric for looping
for(i in 1:nc) {      # create a for-loop of i from 1 to columns in matrix
means[i] <- mean(y[,i]) # means[i] :create a dynamic vector | mean(y[,i]) mean of the [i] column
}
means                 # return mean
}
columnmean(airquality)  # passing the airquality dataframe
columnmean <- function(y, removeNA = TRUE) { # Remove NA from the DATA, bydefault set to TRUE
nc <- ncol(y)         # find the number of column in the matrix
means <- numeric(nc)  # making sure the number are numeric for looping
for(i in 1:nc) {      # create a for-loop of i from 1 to columns in matrix
means[i] <- mean(y[,i], na.rm = removeNA) # na.rm : tells if NA values in the column must be removed before computation
}
means                 # return mean
}
columnmean(airquality)
columnmean(airquality, FALSE) # tells you dont want to remove NA values.
#*********************************************************************
func <- function(a,b){ # Even if we need 2 arguments, R can function with 1.
a^2                  # Since R does nt use value of B, there is no error
}
func(2)
func <- function(a,b) {
print(a)  # A will be executed
print(b) # Since R is using B, console will gibe error of missing value
}
func(45)
savehistory("D:/R for Data Science/John Hopkins Data Science/0717.Rhistory")
savehistory("D:/R for Data Science/John Hopkins Data Science/0717.Rhistory")
savehistory("D:/R for Data Science/John Hopkins Data Science/0717.Rhistory")
